{"version":3,"sources":["assests/avatar_img.jpg","components/Avatar.js","Pages/Home.js","Pages/Hobbies.js","Pages/Dev.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Avatar","props","className","src","imgSrc","alt","Home","require","id","Hobbies","Dev","App","basename","to","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAAAA,EAAOC,QAAU,IAA0B,wC,wGCwB5BC,G,MArBA,SAAAC,GACb,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,gBACb,yBAAKC,IAAKF,EAAMG,OAAQC,IAAI,YAG9B,yBAAKH,UAAU,eAAf,eAEE,6BAFF,mBAIE,6BAJF,MAME,6BANF,sBAQE,6BARF,mBCsBSI,G,MA7BF,WACX,OACE,yBAAKJ,UAAU,aACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,CACEA,UAAU,cACVE,OAAQG,EAAQ,OAGpB,yBAAKL,UAAU,WACb,wBAAIM,GAAG,UAAUN,UAAU,iBAA3B,SAIA,uBAAGA,UAAU,sBAAb,yQAMA,uBAAGA,UAAU,sBAAb,kJClBOO,EAHC,WACd,OAAO,qDCiCMC,EAjCH,WACV,OACE,yBAAKR,UAAU,aACb,yBAAKA,UAAU,WACb,wBAAIA,UAAU,iBAAd,QACA,6BACA,wBAAIA,UAAU,oBAAd,sCACA,wBAAIA,UAAU,iBAAd,WACA,uBAAGA,UAAU,sBAAb,uIAIA,wBAAIA,UAAU,iBAAd,YACA,uBAAGA,UAAU,sBAAb,wcAUA,wBAAIA,UAAU,iBAAd,SACA,uBAAGA,UAAU,sBAAb,uEAEE,0BAAMA,UAAU,YAAhB,SAFF,qGCYOS,MA7Bf,WACE,OACE,kBAAC,IAAD,CAAeC,SAAS,KACtB,yBAAKV,UAAU,OACb,wBAAIA,UAAU,OACZ,4BACE,kBAAC,IAAD,CAAMW,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,QAAT,UAON,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GACnB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,QACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,SCrBYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9f81f815.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar_img.c88250b0.jpg\";","import React from 'react'\nimport './Avatar.css'\n\nconst Avatar = props => {\n  return (\n    <div className='avatar'>\n      <div className='avatar-image'>\n        <img src={props.imgSrc} alt='avatar' />\n      </div>\n\n      <div className='avatar-info'>\n        Jake Grether\n        <br />\n        Computer Science\n        <br />\n        UVU\n        <br />\n        jacob.grether@gmail\n        <br />\n        541.450.1805\n      </div>\n    </div>\n  )\n}\nexport default Avatar\n","import React from 'react'\nimport Avatar from '../components/Avatar'\nimport './Page.css'\nconst Home = () => {\n  return (\n    <div className='container'>\n      <div className='header'>\n        <Avatar\n          className='home-avatar'\n          imgSrc={require('../assests/avatar_img.jpg')}\n        />\n      </div>\n      <div className='content'>\n        <h1 id='welcome' className='content-title'>\n          Hello\n        </h1>\n\n        <p className='content-topic-desc'>\n          My name is Jake Grether. I am a Computer Science major at Utah Valley\n          University where I will graduate in December 2020. I have a passion\n          for creating intuitive user friendly applications, making complex\n          processes simpler, efficient, and more easily maintained.\n        </p>\n        <p className='content-topic-desc'>\n          I've been happily married since June of 2012 to my beautiful wife\n          Misti. I'm a singer song-writer by hobby and love to work with my\n          hands.\n        </p>\n      </div>\n    </div>\n  )\n}\nexport default Home\n","import React from 'react'\n\nconst Hobbies = () => {\n  return <div>Another gay ass div</div>\n}\nexport default Hobbies\n","import React from 'react'\nimport './Page.css'\n\nconst Dev = () => {\n  return (\n    <div className='container'>\n      <div className='content'>\n        <h1 className='content-title'>Locs</h1>\n        <hr />\n        <h3 className='content-subtitle'>Large Order Consolidation Solution</h3>\n        <h1 className='content-topic'>Purpose</h1>\n        <p className='content-topic-desc'>\n          To eliminate human error in, and simplify the pallet consolidation\n          portion of the fulfillment process for large distributor orders.\n        </p>\n        <h1 className='content-topic'>Overview</h1>\n        <p className='content-topic-desc'>\n          A portion of the order fulfillment process for large distributor\n          orders involves consolidating all items pulled onto pallets buil to\n          specifcation so as to maximize the utilization of trailer space. We\n          went through a periode of time when several mistakes were being made\n          when performing final counts to determine that the correct quantities\n          of the correct parts were included. As a result I designed an\n          application to keep track of all that information.\n        </p>\n\n        <h1 className='content-topic'>Tools</h1>\n        <p className='content-topic-desc'>\n          Before I learned any type of front-end or back-end framework I built\n          <span className='emphasis'> LOCS</span> using raw HTML, CSS, and\n          vanilla javascript for the front end, php and MySQL on the back-end.\n        </p>\n      </div>\n    </div>\n  )\n}\nexport default Dev\n\n// import React, { Component } from 'react'\n// import Page from '../components/Page'\n// import ProjectCard from '../components/ProjectCard'\n// import data from '../data/data'\n// import './Dev.css'\n\n// class Dev extends Component {\n//   constructor (props) {\n//     super(props)\n//     this.state = {\n//       locsData: data.locs,\n//       locsSlide: data.locs.slides[0],\n//       slideIndex: data.locs.slides[0].index,\n//       totalSlides: data.locs.totalSlides\n//     }\n//   }\n\n//   onChangeHandler = direction => {\n//     switch (direction) {\n//       case 'next':\n//         if (this.state.slideIndex === this.state.totalSlides - 1) {\n//           this.setState({\n//             locsSlide: data.locs.slides[0],\n//             slideIndex: 0\n//           })\n//         } else {\n//           this.setState({\n//             locsSlide: data.locs.slides[this.state.slideIndex + 1],\n//             slideIndex: this.state.slideIndex + 1\n//           })\n//         }\n//         break\n//       case 'prev':\n//         if (this.state.slideIndex === 0) {\n//           this.setState({\n//             locsSlide: data.locs.slides[this.state.locsData.totalSlides - 1],\n//             slideIndex: this.state.locsData.totalSlides - 1\n//           })\n//         } else {\n//           this.setState({\n//             locsSlide: data.locs.slides[this.state.slideIndex - 1],\n//             slideIndex: this.state.slideIndex - 1\n//           })\n//         }\n\n//         break\n//       default:\n//         break\n//     }\n//   }\n\n//   render () {\n//     return (\n//       <Page>\n//         <div className='project-container'>\n//           <ProjectCard\n//             title={this.state.locsData.title}\n//             desc={this.state.locsData.description}\n//             tools={this.state.locsData.tools}\n//             totalSlides={this.state.locsData.totalSlides}\n//             index={this.state.slideIndex}\n//             slideTitle={this.state.locsSlide.title}\n//             slideImage={this.state.locsSlide.picture}\n//             slideDesc={this.state.locsSlide.description}\n//             change={this.onChangeHandler}\n//           ></ProjectCard>\n//         </div>\n//       </Page>\n//     )\n//   }\n// }\n// export default Dev\n","import React from 'react'\nimport './App.css'\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom'\n\nimport Home from './Pages/Home'\n// import Recommendation from './Pages/Recommendation'\nimport Hobbies from './Pages/Hobbies'\n// import Locs from './Pages/Locs'\nimport Dev from './Pages/Dev'\n\nfunction App () {\n  return (\n    <BrowserRouter basename='/'>\n      <div className='App'>\n        <ul className='nav'>\n          <li>\n            <Link to='/'>Home</Link>\n          </li>\n          <li>\n            <Link to='/Dev'>Dev</Link>\n          </li>\n          {/* <li>\n            <Link to='/Hobbies'>Hobbies</Link>\n          </li> */}\n        </ul>\n      </div>\n      <Route path='/' exact>\n        <Home></Home>\n      </Route>\n      <Route path='/Dev'>\n        <Dev></Dev>\n      </Route>\n      <Route path='/Hobbies'>\n        <Hobbies></Hobbies>\n      </Route>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}