{"version":3,"sources":["components/dashComponents/Dashbox.js","components/dashComponents/Todo.js","components/dashComponents/TodoCard.js","components/dashComponents/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Dashbox","props","className","flexGrowSize","cardTitle","children","Todo","index","type","onChange","onchange","checked","isChecked","title","onClick","onDelete","TodoCard","todosJSX","todos","map","todo","checkboxHandler","delTodoHandler","task","onAddTodo","addTodoHandler","input","newTodoVal","Dashboard","state","i","updatedTodos","setState","console","log","splice","e","target","value","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yWAoBeA,G,MAjBC,SAAAC,GACd,OACE,yBAAKC,UAAS,6CAAwCD,EAAME,eAC1D,yBAAKD,UAAU,2BACb,yBAAKA,UAAU,kBAAkBD,EAAMG,YAQzC,yBAAKF,UAAU,qBAAqBD,EAAMI,aCOjCC,G,YApBF,SAAAL,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMM,MAAQ,IAAM,EAAI,eAAiB,OAC/D,yBAAKL,UAAU,iBACb,2BACEM,KAAK,WACLC,SAAU,kBAAMR,EAAMS,SAAST,EAAMM,QACrCI,QAASV,EAAMW,aAGnB,yBAAKV,UAAS,oBAAeD,EAAMW,UAAY,iBAAmB,OAC/DX,EAAMY,OAET,yBAAKX,UAAU,WAAWY,QAAS,kBAAMb,EAAMc,SAASd,EAAMM,SAA9D,QCiBSS,EA3BE,SAAAf,GACf,IAAIgB,EAAW,YAAIhB,EAAMiB,OAAOC,KAAI,SAACC,EAAMb,GACzC,OACE,kBAAC,EAAD,CACEG,SAAUT,EAAMoB,gBAChBN,SAAUd,EAAMqB,eAChBT,MAAOO,EAAKG,KACZX,UAAWQ,EAAKT,QAChBJ,MAAOA,OAMb,OACE,kBAAC,EAAD,CACEH,UAAU,QACVD,aALa,IAMbqB,UAAWvB,EAAMwB,eACjBC,OAAO,EACPC,WAAY1B,EAAM0B,YAElB,6BAAMV,KC8BGW,G,iNAlDbC,MAAQ,CACNX,MAAO,CACL,CAAEK,KAAM,WAAYZ,SAAS,GAC7B,CAAEY,KAAM,cAAeZ,SAAS,GAChC,CAAEY,KAAM,WAAYZ,SAAS,GAC7B,CAAEY,KAAM,WAAYZ,SAAS,GAC7B,CAAEY,KAAM,cAAeZ,SAAS,GAChC,CAAEY,KAAM,WAAYZ,SAAS,IAE/BgB,WAAY,I,EAKdN,gBAAkB,SAAAS,GAChB,IAAIC,EAAe,YAAI,EAAKF,MAAMX,OAAOC,KAAI,SAACC,EAAMb,GAClD,OAAOuB,IAAMvB,EAAQ,CAAEgB,KAAMH,EAAKG,KAAMZ,SAAUS,EAAKT,SAAYS,KAErE,EAAKY,SAAS,CACZd,MAAOa,IAETE,QAAQC,IAAIH,I,EAGdT,eAAiB,SAAAQ,GACf,IAAIC,EAAY,YAAO,EAAKF,MAAMX,OAClCa,EAAaI,OAAOL,EAAG,GACvB,EAAKE,SAAS,CAAEd,MAAOa,IACvBE,QAAQC,IAAIH,I,EAGdN,eAAiB,SAAAW,GACfH,QAAQC,IAAIE,EAAEC,OAAOC,Q,wEAIrB,OACE,yBAAKpC,UAAU,kBACb,kBAAC,EAAD,CACEgB,MAAOqB,KAAKV,MAAMX,MAClBG,gBAAiBkB,KAAKlB,gBACtBC,eAAgBiB,KAAKjB,eACrBG,eAAgBc,KAAKd,eACrBE,WAAYY,KAAKV,MAAMF,kB,GA5CTa,cCUTC,MAXf,WACE,OACE,yBAAKvC,UAAU,OACb,yBAAKA,UAAU,qBACf,6BACE,kBAAC,EAAD,SCEYwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6074063e.chunk.js","sourcesContent":["import React from 'react'\nimport './Dashbox.css'\n\nconst Dashbox = props => {\n  return (\n    <div className={`dash-box wht-drkgr flex-proportion-${props.flexGrowSize}`}>\n      <div className='dash-box-header grn-wht'>\n        <div className='dash-box-title'>{props.cardTitle}</div>\n        {/* <div\n          className='dash-box-header-btn wht-drkgr'\n          onClick={props.onAddTodo}\n        >\n          +\n        </div> */}\n      </div>\n      <div className='dash-box-content '>{props.children}</div>\n    </div>\n  )\n}\n\nexport default Dashbox\n","import React from 'react'\nimport './Todo.css'\nconst Todo = props => {\n  return (\n    <div className={`todo ${props.index % 2 === 0 ? 'todo-striped' : null}`}>\n      <div className='todo-checkbox'>\n        <input\n          type='checkbox'\n          onChange={() => props.onchange(props.index)}\n          checked={props.isChecked}\n        />\n      </div>\n      <div className={`todo-name ${props.isChecked ? 'todo-completed' : null}`}>\n        {props.title}\n      </div>\n      <div className='del-todo' onClick={() => props.onDelete(props.index)}>\n        -\n      </div>\n    </div>\n  )\n}\n\nexport default Todo\n","import React from 'react'\nimport Dashbox from './Dashbox'\nimport './TodoCard.css'\nimport Todo from './Todo'\n\nconst TodoCard = props => {\n  let todosJSX = [...props.todos].map((todo, index) => {\n    return (\n      <Todo\n        onchange={props.checkboxHandler}\n        onDelete={props.delTodoHandler}\n        title={todo.task}\n        isChecked={todo.checked}\n        index={index}\n      />\n    )\n  })\n  const maxWidth = '1'\n\n  return (\n    <Dashbox\n      cardTitle='To Do'\n      flexGrowSize={maxWidth}\n      onAddTodo={props.addTodoHandler}\n      input={true}\n      newTodoVal={props.newTodoVal}\n    >\n      <div>{todosJSX}</div>\n    </Dashbox>\n  )\n}\n\nexport default TodoCard\n","import React, { Component } from 'react'\nimport TodoCard from './TodoCard'\nimport CalendarCard from './CalendarCard'\nimport ClientsCard from './ClientsCard'\nimport './Dashboard.css'\n\nclass Dashboard extends Component {\n  state = {\n    todos: [\n      { task: 'Get Milk', checked: false },\n      { task: 'Get sausage', checked: false },\n      { task: 'Get eggs', checked: false },\n      { task: 'Get Milk', checked: false },\n      { task: 'Get sausage', checked: false },\n      { task: 'Get eggs', checked: false }\n    ],\n    newTodoVal: ''\n  }\n\n  // this.todoCompletionHandler = this.todoCompletionHandler.bind(this)\n\n  checkboxHandler = i => {\n    let updatedTodos = [...this.state.todos].map((todo, index) => {\n      return i === index ? { task: todo.task, checked: !todo.checked } : todo\n    })\n    this.setState({\n      todos: updatedTodos\n    })\n    console.log(updatedTodos)\n  }\n\n  delTodoHandler = i => {\n    let updatedTodos = [...this.state.todos]\n    updatedTodos.splice(i, 1)\n    this.setState({ todos: updatedTodos })\n    console.log(updatedTodos)\n  }\n\n  addTodoHandler = e => {\n    console.log(e.target.value)\n  }\n\n  render () {\n    return (\n      <div className='dash-container'>\n        <TodoCard\n          todos={this.state.todos}\n          checkboxHandler={this.checkboxHandler}\n          delTodoHandler={this.delTodoHandler}\n          addTodoHandler={this.addTodoHandler}\n          newTodoVal={this.state.newTodoVal}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n","import React from 'react'\nimport './App.css'\nimport Dashboard from './components/dashComponents/Dashboard'\n//import Navbar from './components/Navbar'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <div className='navbar drkgr-wht'></div>\n      <div>\n        <Dashboard></Dashboard>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}