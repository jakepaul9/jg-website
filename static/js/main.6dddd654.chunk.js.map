{"version":3,"sources":["assests/avatar_img.jpg","components/Page.js","components/Avatar.js","components/Home.js","components/Dev.js","components/Hobbies.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Page","props","className","children","Avatar","src","imgSrc","alt","Home","require","Dev","pageTitle","Hobbies","App","to","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAAAA,EAAOC,QAAU,IAA0B,wC,wGCU5BC,G,MAPF,SAAAC,GACX,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,gBAAgBD,EAAME,aCI5BC,G,MAPA,SAAAH,GACb,OACE,yBAAKC,UAAU,UACb,yBAAKG,IAAKJ,EAAMK,OAAQC,IAAI,cCgBnBC,EAnBF,WACX,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEN,UAAU,cACVI,OAAQG,EAAQ,MAElB,sCALF,wQAUE,6BACA,6BAXF,+ICCWC,EAHH,WACV,OAAO,kBAAC,EAAD,CAAMC,UAAU,OAAhB,kCCEMC,EAHC,WACd,OAAO,kBAAC,EAAD,CAAMD,UAAU,WAAhB,yBC2BME,MAvBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKX,UAAU,OACb,wBAAIA,UAAU,OACZ,4BACE,kBAAC,IAAD,CAAMY,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,QAAT,UAON,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWT,IACjC,kBAAC,IAAD,CAAOO,KAAK,OAAOE,UAAWP,IAC9B,kBAAC,IAAD,CAAOK,KAAK,WAAWE,UAAWL,MCdpBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6dddd654.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar_img.d65953da.jpg\";","import React from 'react'\nimport './Page.css'\n\nconst Page = props => {\n  return (\n    <div className='container'>\n      <div className='page-content'>{props.children}</div>\n    </div>\n  )\n}\nexport default Page\n","import React from 'react'\nimport './Avatar.css'\n\nconst Avatar = props => {\n  return (\n    <div className='avatar'>\n      <img src={props.imgSrc} alt='avatar' />\n    </div>\n  )\n}\nexport default Avatar\n","import React from 'react'\nimport Page from './Page'\nimport Avatar from './Avatar'\nconst Home = () => {\n  return (\n    <Page>\n      <Avatar\n        className='home-avatar'\n        imgSrc={require('../assests/avatar_img.jpg')}\n      />\n      <h3>Hello,</h3>\n      My name is Jake Grether. I am a Computer Science major at Utah Valley\n      University where I will graduate in December 2020. I have a passion for\n      creating intuitive user friendly applications, making complex processes\n      simpler, efficient, and more easily maintained.\n      <br />\n      <br />\n      I've been happily married since June of 2012 to my beautiful wife Misti.\n      I'm a singer song-writer by hobby and love to work with my hands.\n    </Page>\n  )\n}\nexport default Home\n","import React from 'react'\nimport Page from './Page'\n\nconst Dev = () => {\n  return <Page pageTitle='Dev'>Projects and Code coming soon</Page>\n}\nexport default Dev\n","import React from 'react'\nimport Page from './Page'\n\nconst Hobbies = () => {\n  return <Page pageTitle='Hobbies'>Another gay ass page</Page>\n}\nexport default Hobbies\n","import React from 'react'\nimport './App.css'\nimport { BrowserRouter, Route, Link } from 'react-router-dom'\n\nimport Home from './components/Home'\nimport Dev from './components/Dev'\nimport Hobbies from './components/Hobbies'\n\nfunction App () {\n  return (\n    <BrowserRouter>\n      <div className='App'>\n        <ul className='nav'>\n          <li>\n            <Link to='/'>Home</Link>\n          </li>\n          <li>\n            <Link to='/Dev'>Dev</Link>\n          </li>\n          {/* <li>\n            <Link to='/Hobbies'>Hobbies</Link>\n          </li> */}\n        </ul>\n      </div>\n      <Route path='/' exact component={Home}></Route>\n      <Route path='/Dev' component={Dev}></Route>\n      <Route path='/Hobbies' component={Hobbies}></Route>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}